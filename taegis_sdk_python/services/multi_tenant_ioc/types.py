"""MultiTenantIoc Types and Enums."""
# pylint: disable=no-member, unused-argument, too-many-locals, duplicate-code

# Autogenerated
# DO NOT MODIFY

from typing import Optional, List, Dict, Union, Any, Tuple


from dataclasses import dataclass, field
from dataclasses_json import dataclass_json, config


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class EventWindow:
    """EventWindow."""

    earliest_event: Optional[str] = field(
        default=None, metadata=config(field_name="earliestEvent")
    )
    latest_event: Optional[str] = field(
        default=None, metadata=config(field_name="latestEvent")
    )


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class TenantCount:
    """TenantCount."""

    tenant_id: Optional[str] = field(
        default=None, metadata=config(field_name="tenantId")
    )
    count: Optional[int] = field(default=None, metadata=config(field_name="count"))


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class LogicalTypeFilter:
    """LogicalTypeFilter."""

    logical_type: Optional[str] = field(
        default=None, metadata=config(field_name="logicalType")
    )
    values: Optional[List[str]] = field(
        default=None, metadata=config(field_name="values")
    )
    operator: Optional[str] = field(
        default=None, metadata=config(field_name="operator")
    )


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class TenantsInput:
    """TenantsInput."""

    tenant_ids: Optional[List[str]] = field(
        default=None, metadata=config(field_name="tenantIds")
    )
    session_key: Optional[str] = field(
        default=None, metadata=config(field_name="sessionKey")
    )


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class EventCountByLogicalType:
    """EventCountByLogicalType."""

    matching_value: Optional[str] = field(
        default=None, metadata=config(field_name="matchingValue")
    )
    event_type: Optional[str] = field(
        default=None, metadata=config(field_name="eventType")
    )
    date: Optional[str] = field(default=None, metadata=config(field_name="date"))
    count: Optional[int] = field(default=None, metadata=config(field_name="count"))
    counts_by_tenant: Optional[List[TenantCount]] = field(
        default=None, metadata=config(field_name="countsByTenant")
    )


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class EventCountResult:
    """EventCountResult."""

    next: Optional[str] = field(default=None, metadata=config(field_name="next"))
    results: Optional[List[EventCountByLogicalType]] = field(
        default=None, metadata=config(field_name="results")
    )


@dataclass_json
@dataclass(order=True, eq=True, frozen=True)
class EventAggregationArguments:
    """EventAggregationArguments."""

    event_type_filter: Optional[List[str]] = field(
        default=None, metadata=config(field_name="eventTypeFilter")
    )
    earliest: Optional[str] = field(
        default=None, metadata=config(field_name="earliest")
    )
    latest: Optional[str] = field(default=None, metadata=config(field_name="latest"))
    limit: Optional[int] = field(default=None, metadata=config(field_name="limit"))
    logical_type_filter: Optional[LogicalTypeFilter] = field(
        default=None, metadata=config(field_name="logicalTypeFilter")
    )
    tenants_context: Optional[TenantsInput] = field(
        default=None, metadata=config(field_name="tenantsContext")
    )
